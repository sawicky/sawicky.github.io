<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Report</title>
      <link href="/2019/03/02/Report/"/>
      <url>/2019/03/02/Report/</url>
      
        <content type="html"><![CDATA[<h2 id="Cyber-Security-An-Offensive-Mindset"><a href="#Cyber-Security-An-Offensive-Mindset" class="headerlink" title="Cyber Security - An Offensive Mindset"></a>Cyber Security - An Offensive Mindset</h2><h4 id="Progress-Portfolio-report-Summer-2019"><a href="#Progress-Portfolio-report-Summer-2019" class="headerlink" title="Progress/Portfolio report Summer 2019"></a>Progress/Portfolio report Summer 2019</h4><h5 id="the-pwning-of-teacher"><a href="#the-pwning-of-teacher" class="headerlink" title="the pwning of teacher"></a>the pwning of teacher</h5><h3 id="Executive-Report"><a href="#Executive-Report" class="headerlink" title="Executive Report"></a>Executive Report</h3><p>The popular e-Learning framework used in millions of schools and universities, Moodle, is vulnerable by design to exploitation. A student with stolen credentials or a malicious teacher will be able to upload code via Moodle in a number of ways in the goal of attacking the computer that runs the Moodle instance. This attack can provide full remote access to that machine, including the modification of any sensitive data, as well as the breach of the internal network, in which a number of other attacks can be done to compromise the entire school network. </p><p>The compromise of a school network can easily lead to identify theft, fraudulent modification of grades, access to the billing systems aswell as classified data between non students.</p><p>This report will identify a method of attack using a custom quiz question which provides initial access to the Moodle server. Enumeration methods will also be identified that allows the traversal of a non-priviledged user into full remote access via insecurities within the database data structures, as well as highlighting the effects of poor password concealment.</p><h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>The objective of this report is to highlight the journey of my technical development within Offensive Security, culminating at the 4 week mark in the total exploitation of a machine that is highly rated as a ‘real-life’ scenario.<br>The machine in question is ‘Teacher’ from HackTheBox.eu, which involves the exploitation of the Moodle e-Learning framework and privilege escalation due to poor security of passwords. Both of these scenarios, especially a poorly secured password are highly prevalant in the every day world, and this knowledge is beneficial for my professional development, as the experience gained here can easily be applied to the real world. This experience will be needed if I pursue my security career in order to identify the low-hanging fruit of threats such as passwords or vulnerable software, and provide solutions to help secure an environment.</p><p>I will also explore my methods of enumeration, which is the thought process and order of operations that I have built for myself that will help me in achieving the exploitation of a machine. As I practice on real world machines and vulnerable machines provided by a hobby website, my list of enumeration steps expands, and helps me in achieving an initial foothold in the exploitation. This step is incredibly important, as not only does enumeration grow vertically in number of items to iterate through, but through experience it also grows laterally - using the same steps in different methods, or paying closer attention to the simpler steps in order to find a foothold.</p><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><p>To connect to the HackTheBox environment, we are given an OpenVPN package which we connect to, esentially installing a tunnel between our machine and their network. The machine that we decide to work on is given a single or a range of private IP addresses, which we can then access as we are inside that network.</p><h5 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h5><p>The bulk of work done in the exploitation of the machine is within the Kali Linux operating system. Kali is a flavour of Linux specially built for penetration testing and exploitation, and includes about 3000 different tools, scripts and frameworks already installed, a selection of which we will be using.</p><h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h5><p>Tools to be used are generally classified in different categories, such as auxiliary scanners, vulnerability scanners, exploitation tools and payloads.<br>Initial work is done using an auxiliary scanner such as nmap, which essentially communicates with the target computer and abuses the full capabilities of the TCP/UDP networking protocols to provide us as much information about the target as possible.</p><h5 id="Dirbuster"><a href="#Dirbuster" class="headerlink" title="Dirbuster"></a>Dirbuster</h5><p>Another avenue of auxiliary scanning is possible if the target machine is running a web server, as was the case of the Teacher machine. A tool named Dirbuster can be used, which guesses at possible web pages that the server can contain by using a dictionary of a few thousand of the most common web page names (such as index.html, /blog.php, /wordpress etc). Since initially we will have no idea about the structure of a website, we must use a tool like this to identify specific pages of interest. Moodle is an example of a page of interest that would not be found using any other type of tool.</p><h5 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h5><p>Since a primary vulnerability was the user password, we can use tools such as Hydra, which acts like a brute force guesser of passwords given a specific dictionary. This attack involved creating a custom dictionary to launch a guessing attack against a password which was mostly known barring some missing characters.</p><h5 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h5><p>Once we have scanned the target and have identified potential channels of attack, we can then use a tool that will allow our machines to communicate to each other via that open channel. Netcat is an example of that tool, in which we can send commands back to our computer once we have infiltrated remote access on the target server.</p><h5 id="reverse-shell"><a href="#reverse-shell" class="headerlink" title="reverse shell"></a>reverse shell</h5><p>The primary workhorse of this attack was the use of a Reverse Shell. A reverse shell is a program which we can execute on the target machine in clever ways in order to allow access to it from our computer. In this scenario, we have exploited Moodle to incorporate a reverse shell into the Moodle server, which lets us connect to it via netcat as mentioned above, and thus begin to take control of the machine.</p><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>The first step of enumeration is reconnaissance - the art of gathering as much information as we can about the subject.</p><p>The very first step I take for recon is run an nmap scan, which will tell us exactly how the target machine appears to the outside world. It’ll tell us about all the channels it’s communicating with, which services it’s sharing with the world and show me potential footholds for attack.</p><p>I run this using the command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -v -T4 -A &#123;ip address&#125;</span><br></pre></td></tr></table></figure></p><p>The structure of this command is as follows:</p><p><code>-sV</code> - A parameter that lets us view the <strong>V</strong>ersion of any <strong>s</strong>ervices it is running.<br><code>-v</code> - Run in <strong>v</strong>erbose mode, which tells the program to output more information than normal back to us while running, including non critical things like status of the operation, problems etc.</p><p><code>-T4</code> - Run the program with <strong>4</strong> <strong>T</strong>hreads. A thread is similar to a lane of traffic of a highway, but for the CPU of the computer. This parameter lets us run the command using 4 lanes of traffic, which can help parallelize and quicken the operation.</p><p><code>-A</code> - <strong>A</strong>ttempt to gather information about the OS, including OS name, version, traceroute and potential scripts running</p><p>The output of the command may look something similar to this:</p><a href="/media/images/report/huge-2.png"><img src="/media/images/report/body-2.png" alt="Expand Image" title="NMAP"></a><p>Straight away we can see that there is an open TCP port at port 80. From experience, I know that this is the port that HTTP traffic communicates on AKA the tangible internet that we can access via a web browser. This means, if we type in <a href="http://10.10.10.153" target="_blank" rel="noopener">http://10.10.10.153</a> into a web browser, we should be able to see what that web server is offering us.</p><a href="/media/images/report/huge-3.png"><img src="/media/images/report/body-3.png" alt="Expand Image" title="Website"></a><p>Great - We have a public facing website. We can then use some more reconnaissance tools such as Dirbuster to guess at which else comes after 10.10.10.153/ so we can laterally traverse the website without having any knowledge of it.<br>Dirbuster usually requires a wordlist, which is essentially a large text file containing the most popular variations of page names, and then begins guessing and trying to reach those pages. If it fails, then the web server will simply display a 404 error, which means the requested content was not found. If Dirbuster guesses right, it’ll let us know.</p><p>We can use dirbuster in the following way:<br><code>dirb http://10.10.10.153 /usr/share/wordlists/dirb/common.txt</code><br>This will use the ‘common’ wordlist, which contains maybe 3000 different variations. If time is not a problem, you could opt for an even larger wordlist.<br>After a few minutes, dirbuster can reveal some interesting information:</p><a href="/media/images/report/huge-4.png"><img src="/media/images/report/body-4.png" alt="Expand Image" title="Moodle"></a><p>Dirbuster has found a moodle page, which is something that we would not be able to find via the front page of that website if we looked.<br>Moodle is a piece of software running somewhere on that web server. A piece of software that is likely to have vulnerabilities, which it’s now time to scan.</p><h3 id="Vulnerability-Scanning"><a href="#Vulnerability-Scanning" class="headerlink" title="Vulnerability Scanning"></a>Vulnerability Scanning</h3><h3 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h3><h3 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h3>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
          <category> report </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reflections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week 3 Reflections3</title>
      <link href="/2019/02/24/Week-3-Reflections3/"/>
      <url>/2019/02/24/Week-3-Reflections3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.hackthebox.eu/badge/image/105856" alt="Hack The Box"></p><h5 id="February-24-2019-7-50-PM"><a href="#February-24-2019-7-50-PM" class="headerlink" title="February 24 2019, 7:50 PM"></a>February 24 2019, 7:50 PM</h5><p>This week in our Cyber Security studios, we focused on the actual penetration of real machines, including learning more steps of enumeration, a real-world example of a pentest job via the ApointB web application and an example VM from Deloitte.</p><p>In keeping up with this week’s theme, I managed to crack 4 boxes on HackTheBox (Chaos, Curling, Teacher, Irked) and have some significant progress on Carrier. There are 2 pretty easy boxes in there (Curling, Irked) but the other 3 are around the mid level, and I have learned or am learning an absolute ton about enumeration in the progress, as theres nothing too technical or challenging in these boxes, just testing how thorough your enumeration is. A big reason why I didn’t manage to beat Carrier yet is because it keeps getting DoS’d either intentionally or otherwise by other users on the free server, as the first step involves some pretty serious dirbuster and UDP scanning, which I guess takes it’s toll. I managed to get admin credentials on the web app and found a possible vector for remote code execution, but navigating any further just led to timeouts. Sad.</p><p>The sheer fact that I was able to do 4.5 boxes in this week alone after having started from 0 when I started this course is a really great feeling. I’m getting positive feedback during class aswell, and having great chats with other students in the class. My tutors and the other students have been probably the number 1 influence on my learning and motivation, and it feels great having them there. I left a quick SFS feedback saying out of the 5 years of Uni i’ve done, this class was definately the most enjoyable. I feel like i’ve been able to manage my time well, but theres still the big hurdle of the portfolio+next weeks deliverables that I haven’t started with yet, so i’ll probably have to be a little more humbled and focused to try and nail that part [5]</p><p>As a group, we were tasked to present about a skiddie tool we researched, it’s effects, purpose and how to use it, however I was absent on class on that day. I did try to contribute in a little way by writing 2 slides, but that tool (BeEF) was so interesting to me when I was studying it, and I had a lot to share. I trusted my team to do a good joob regardless, which they did, so in the end it wasn’t all that bad.</p><h3 id="In-Class"><a href="#In-Class" class="headerlink" title="In Class"></a>In Class</h3><p>In class on Friday, I was met with Shaun from ApointB, who was happy that I found a bug in their web application that leaked the entire database of users information. He seemed very well versed in the business strategy side of security vulnerabilities, and explained to me that while that bug wasn’t a huge security flaw, it definately needs to be fixed as it creates a big hole in their app for others to do recon on. Shaun explained to me that if some competitor was to find this database, all they’d have to do is call up each of the users in that list, and provide them a competetive offer to the software solution that ApointB offers them. I never really thought about this, and was grateful that Shaun could provide me a little perspective from the business side of things, as a SOC analyst is going to have to provide these sorts of discussions to a client or management in order to justify some work. </p><p>I may have surprised Shaun a little bit when I talked about the next attack I tried - I registered the account <a href="mailto:&#39;rupport@apointb.com" target="_blank" rel="noopener">&#39;rupport@apointb.com</a>‘ with 0 verification using that email domain, and attempted a session cookie bitflipper attack, in where I tried to bruteforce my cookie to hopefully provide me the session token for <a href="mailto:&#39;support@apointb.com" target="_blank" rel="noopener">&#39;support@apointb.com</a>‘, which I assumed to be an administrator account. This wasn’t successful, but we still had a chat that perhaps the registration of accounts with email domains that you don’t have access to should be looked at. </p><p>Shaun also provided me some new vectors of exploitation to try, including possibly linking a custom domain to the ApointB nameservers and finding a vulnerability in that fashion, as well as closing the possibility of bruteforcing the list of possible admin accounts, as they have all been passworded using LastPass, which cannot be bruteforced. </p><p>In conclusion to the ApointB challenge, I learned a lot about business strategy in dealing with security vulnerabilities, my first experience in writing documentation of the flaws that I did find, and what I did try and failed at, and at the same time had a lot of fun doing so. [1][2][3]</p><hr><p>I had a crack at the Deloitte VM aswell, which taught be a few things about popular SSL vulnerabilities, especially heartbleed.<br>My initial enumeration of the Deloitte VM led to some of my SSL enum scripts detecting that the machine may be vulnerable to CRIME, which is a rabbit hole that I willingly dove deep into. It sucked out a lot of hours trying to figure out how to exploit CRIME, as it was more than just a metasploit moduel.</p><p>I asked Jai for help, and he confirmed that it wasn’t CRIME, but another one, and that it could be found on metasploit. My 2 options here were Heartbleed and some sort of oracle attack. I assumed it was heartbleed, as when I ran the exploit, a result came back saying [Leaked]. I was a bit confused, as there was no other output, so I asked Jai for help again and he suggested the dump option. I guessed that my metasploit was setup incorrectly, or maybe Heartbleed was another rabbit hole as that option still did not do anything, so I left it for Friday.[4]</p><p>In Friday’s class, I asked Jason if the commands I used was meant to work, and he said yes, and told me to dump the output. Again the dumping option did nothing for me, so I looked at the documentation for metasploit. There was a global variable called verbose that I could set to true, so I set that, ran Heartbleed again, and I finally had some output. [4]</p><p>Unfortunately, since I ran a bunch of enum scripts on the Deloitte VM, the heartbleed output didn’t show anything worthwhile, so I had to convince it to show relevant output again by launching a POST on the login page, then running heartbleed after. I got my credentials, and getting root after that was easy.</p><p>These little things, alongside my breaking of the HTB machines, has taught me to slow down and be thorough on my enumeration and process. I could have rooted the box within a few minutes on Wednesday, but because I rushed straight into it, and didn’t think about anything else once I had the slightest idea of one method messed me up and slowed me down in the end.[5]</p><hr><p>I’m not going to write up my walkthroughs for Curling or Irked, even though they did trip me up (Especially root on Irked - I have never dealt with SUID bits before, and that was an interesting introduction to it), as they are pretty simple, but I plan to crack Carrier this week at some point when it’s less busy on the free servers, and I’m sure it’s going to teach me a ton about lateral traversal, a brush up on networking and linux networking administration. I have written a write up on the Teacher machine, and right now am trying to figure out how best to format it in a PDF and password protect it.</p><hr><p>1: SLO 1<br>2: SLO 2<br>3: SLO 3<br>4: SLO 4<br>5: SLO 5</p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reflections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Friday 22/02/2019 Deliverables</title>
      <link href="/2019/02/22/Friday-22-02-2019-Deliverables/"/>
      <url>/2019/02/22/Friday-22-02-2019-Deliverables/</url>
      
        <content type="html"><![CDATA[<p>For my Friday Deliverables - I have decided to write up my documentation on 2 rooted boxes on HTB, Chaos and Curling. These writeups can be found <a href="/pwn/htb">here</a></p><p>I also submitted a report for the real world example site, but have not yet written up documentation for it.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Week 2 Reflections</title>
      <link href="/2019/02/17/Week-2-Reflections/"/>
      <url>/2019/02/17/Week-2-Reflections/</url>
      
        <content type="html"><![CDATA[<h5 id="February-17-2019-11-34-AM"><a href="#February-17-2019-11-34-AM" class="headerlink" title="February 17 2019, 11:34 AM"></a>February 17 2019, 11:34 AM</h5><p>This week in our Cyber Security studios, we focused a bit more on web application security and penetration, and having a larger emphasis on the definition of our problem statement and the ultimate shape of our portfolio for this subject.</p><p>This week I also started my first professional job, working as an Apex developer, which is the language used in Salesforce CRM products for a small startup, which is an incredibly different environment from working in Help Desk for a law firm generating $1 billion a year. I went from structure, including service management, specialized team management staff, incident management into being thrown in the deep end with an almost unused incident management system. Self study is needed to keep myself afloat in this new job, as while i’m experienced in programming Java already (of which Apex is very similar to), theres still a ton of new concepts that will take my limited time away.</p><p>This sudden dissapearance of my free time, time that is meant to be commited to this subject, has cemented the idea that my time management strategy sucks (ie there is none), and the firsts steps I have taken to rectify this is to begin being more vocal in class if I need more insight in what is to be achieved during the week in terms of milestones, as I think a defined list of milestones is how I best operate.[5]</p><p>An example of this would be spinning up my old VPS and Software Engineering Project, I had a talk with our tutors for cyber sec and I had the idea that I could use this project, insecure as it is, as my learning experience to achieve my SLOs. </p><ul><li>It’s a web application, so it fits in perfectly with the content we’ve been learning the past 2 weeks</li><li>It wasn’t designed to be secure, which highlighted a problem with our SDLC</li><li>I have good understanding of how the entire thing is structured, so nothing will be blind (I know where all the endpoints are, which saves a few hours (at my skill level) with burpsuite)</li><li>I have root access to the server behind the application, so I can always have a look at logs [2][3]</li></ul><p>Another benefit, is that since it’s hosted on a private VPS that I signed a permission form for penetration testing, I could even see if I can pwn my own box as a change of pace.<br>This is still an ongoing idea, and more talk is needed with my tutors, as they ultimately know whether or not my application is viable or not. [1]</p><h3 id="Progress-this-week"><a href="#Progress-this-week" class="headerlink" title="Progress this week"></a>Progress this week</h3><p>I started off this week (on Wednesday) by being asked to present a Problem Statement we have defined the week prior. I blame my poor time management in this case, as I didn’t have any presentation prepared, and my blog write up was still sitting undeployed on my home desktop. The second way I messed up was misinterpreting our tutor’s instructions earlier on how to define a problem statement. I know now that a Problem Statement is what you can present to some CEO of some company, define a problem, what it’ll affect (his bottom lines), and how you’ll fix it, all under 1 minute.</p><p>Since I didn’t have any presentation prepared, I decided to accept my fate and talk about what I studied previously on the weekend, which was about why exactly XSS was so prevalent. You could formulate this to sound like an executive problem statement but I leaned on the technical side. </p><p>By sheer luck, I wasn’t asked to present before the break, so during lunch I slapped together a quick presentation and talked about exactly why XSS was so prevalent. It’s prevalent because of DOM-based XSS attacks being the majority of xss attacks, since they rely solely on human failure by clicking on a crafted link, and exploiting raw text within the DOM processor of a browser. It’s much easier to sanitize stored and reflected XSS, but the threat of a DOM based xss attack is there if you have any user-influenced raw text displayed in a browser at all.</p><p>So I talked about the why, the how and how to fix it, but didn’t talk much about what it might do, since I mistakenly made this a technical presentation, and assumed the audience knew what XSS does. I still managed to fit in the entirety of my presentation in 2:59 with a time limit of 3:00 so I’m happy with that.[4]</p><p>I then studied by tackling a medium-hard level HackTheBox web challenge called I know Mag1k. I did a write up of it <a href="/ctf/htb/">here</a>.</p><p>It exposed me to a whole new level of exploit involving an Oracle attack, new tools and a new path of enumeration for my further studies.</p><h3 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next"></a>What’s Next</h3><p>Next week we’re starting actual box pwning, which means I need to be ahead of it since I’ll also have some crazy work stress to deal with aswell. I need to catch up to Bandit 30, Natas 15 and hopefully pwn the Help machine on Hack the box. I’ll also end up asking the tutors at some point if they have any walkthroughs for retired machines.</p><hr><p>1: SLO 1<br>2: SLO 2<br>3: SLO 3<br>4: SLO 4<br>5: SLO 5</p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reflections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UTS Cyber Security Problem Statement</title>
      <link href="/2019/02/14/UTS-Cyber-Security-Problem-Statement/"/>
      <url>/2019/02/14/UTS-Cyber-Security-Problem-Statement/</url>
      
        <content type="html"><![CDATA[<h3 id="Creating-a-self-hosted-vulnerable-web-target"><a href="#Creating-a-self-hosted-vulnerable-web-target" class="headerlink" title="Creating a self-hosted vulnerable web target"></a>Creating a self-hosted vulnerable web target</h3><p>Last semester, I completed a Software Engineering project and wrote a Node-js app called Mastodon. It was intended to be a UTS registration portal for booking medical appointments with in-faculty medical staff or medical students, as currently the only way to book an appointment is to call a helpline, which can only be reached during business hours.</p><p>The app runs on Node.JS, with no middleware and Mongo for it’s record collection.<br>After researching web exploitation, and understanding that a vast majority of web-related attacks are XSS based, it has helped me formulate a plan to attack my own system using a variety of XSS attacks and tools.</p><p>This can be a strong learning experience, as the app itself was not designed for security in mind barring basic input validation. I have the advantage of knowing exactly how the application is structured internally, and in case I ever get stuck, the app will be hosted on a private VPS that I can share to the class and ask them to rip it apart. I can then check logs to see exactly what damaged they did, and potentially find out how.</p><p>Initial research has brought me to focus on 2 main tools:</p><ul><li>Burpsuite, which I have covered a little bit already on my Hack The Box progress</li><li>BeEF, which is a brand new tool I have 0 experience with, and am invested to learn about.</li></ul><p>The application was constructed after a mentor reviewed design process and Software development lifecycle, which means that this could potentially be a pretty accurate representation of a lower-tier hosted web app, such as a small time shop or blog, that hasn’t had the privilege of an experienced developer who knows how to properly secure a website.</p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> training </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RDs and Bug Bounties</title>
      <link href="/2019/02/14/RDs-and-Bug-Bounties/"/>
      <url>/2019/02/14/RDs-and-Bug-Bounties/</url>
      
        <content type="html"><![CDATA[<h2 id="Are-you-better-off-killing-insects-for-your-bug-bounties"><a href="#Are-you-better-off-killing-insects-for-your-bug-bounties" class="headerlink" title="Are you better off killing insects for your bug bounties?"></a>Are you better off killing insects for your bug bounties?</h2><h5 id="February-14-2019-8-53-PM"><a href="#February-14-2019-8-53-PM" class="headerlink" title="February 14, 2019, 8:53 PM"></a>February 14, 2019, 8:53 PM</h5><p>A bug bounty is a deal offered by companies in order to tempt security-versed individuals into breaking into their systems with various exploits and vulnerabilities.</p><a href="/media/images/huge-firebounty.jpg"><img src="/media/images/body-firebounty.jpg" alt="The FireBounty main page" title="Zerodium"></a><p>A good range of large companies actually do offer these bounties, there even exists some aggregation websites that will list a bunch of currently available bounties, ranging from $50 to $50,000, or some other questionable websites that will buy your 0 days for up to $2,000,000</p><a href="/media/images/huge-zerodium.png"><img src="/media/images/body-zerodium.png" alt="Zerodium Mobile 0day payouts" title="Zerodium"></a><p>On the flip side, some bug bounty programs exists, such as the Open Bug Bounty community, that relies on people to post whatever disclosure they want, and a good will system encouraging the affected website to pay the reporter.</p><a href="/media/images/huge-openbugbounty.png"><img src="/media/images/body-openbugbounty.png" alt="The open bug bounty form" title="Zerodium"></a><p>Ever since the release of the first bug bounty program in 1995, for the Netscape Navigator browser, there has been a generally positive outcome from these programs. Even the US Government’s Pentagon have their own version of a bug bounty,and in 1 month from April 18 to May 12, 138 unique security flaws were identified, and $71,200 was paid out.</p><a href="/media/images/huge-hackthepentagon.png"><img src="/media/images/body-hackthepentagon.png" alt="The success of Hack The Pentagon" title="Zerodium"></a><p>The only reason these bug bounties are successful is because they usually include a Reasonable Disclosure program.<br>An RD is an agreement between an exploiter and a vendor that the exploit is targeted to in where that vulnerability is only disclosed after a period of time that allows for that vulnerability to be patched. </p><p>A Reasonable Disclosure report format can be used for my Problem Statement in an attempt to emulate the documentation that security researcher or a whitehat will need to write up for any piece of work they may be doing.</p><h4 id="Sources"><a href="#Sources" class="headerlink" title="Sources:"></a>Sources:</h4><p><a href="https://www.mcafee.com/enterprise/en-au/threat-center/advanced-threat-research/disclosure.html" target="_blank" rel="noopener">https://www.mcafee.com/enterprise/en-au/threat-center/advanced-threat-research/disclosure.html</a><br><a href="https://www.cert.gov.au/critical-infrastructure-big-business/report-incident/vulnerability-disclosure-policy" target="_blank" rel="noopener">https://www.cert.gov.au/critical-infrastructure-big-business/report-incident/vulnerability-disclosure-policy</a></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reflections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Training</title>
      <link href="/2019/02/13/CTF-Training/"/>
      <url>/2019/02/13/CTF-Training/</url>
      
        <content type="html"><![CDATA[<h2 id="CTF-Training"><a href="#CTF-Training" class="headerlink" title="CTF Training"></a>CTF Training</h2><h5 id="February-9-2019-1-52-PM"><a href="#February-9-2019-1-52-PM" class="headerlink" title="February 9, 2019, 1:52 PM"></a>February 9, 2019, 1:52 PM</h5><p>For this weeks studio progress, I decided to start upon some CTFs and try and start from scratch. My progress is logged <a href="/ctf/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> training </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL-on-Github-Pages</title>
      <link href="/2019/02/13/SSL-on-Github-Pages/"/>
      <url>/2019/02/13/SSL-on-Github-Pages/</url>
      
        <content type="html"><![CDATA[<h2 id="Installing-SSL-on-a-Github-Gitlab-pages-static-webpage"><a href="#Installing-SSL-on-a-Github-Gitlab-pages-static-webpage" class="headerlink" title="Installing SSL on a Github/Gitlab pages static webpage"></a>Installing SSL on a Github/Gitlab pages static webpage</h2><h5 id="February-6-2019-12-37-PM"><a href="#February-6-2019-12-37-PM" class="headerlink" title="February 6, 2019, 12:37 PM"></a>February 6, 2019, 12:37 PM</h5><p>Github offers a student education pack, and within that pack also offers 1 free year’s registration on a customized .me TLD alongside a free year of SSL certification.<br>Sounds great right?<br>The problem is, Github is not a web hosting platform and only hosts static web pages at a bare minimum capacity, which means theres no real way to use that SSL certification if you’re using Github hosting. </p><p>You’re going to have to rely on some other service to provide an SSL redirect for you, which namecheap doesn’t provide. </p><p>One such service is Cloudflare, which lets you register a single website for free, which will provide a SSL activated nameserver for your domain, which means for a browser to connect your websites name to an IP address, It’ll ask Cloudflare first.</p><ol><li>Register an account for Cloudflare <a href="https://dash.cloudflare.com/sign-up" target="_blank" rel="noopener">here</a></li><li>Put your .me or .github.io link in the next box<br><img src="/media/images/addsite.jpg" alt="Add your site here"></li><li><p>Let CloudFlare scan current DNS records associated with the domain name, and confirm if they look correct (Look at your Namecheap panel to confirm)</p></li><li><p>Click the free plan, and continue once you see the new records it will apply</p></li><li><p>CloudFlare will then give you 2 nameservers that you’ll need to apply to your registrar (Namecheap in this case) so name resolution requests will go through CloudFlare services instead<br><img src="/media/images/ns.jpg" alt="Your actual nameserver names may be different"></p></li><li><p>Now, pop over to your Namecheap control panel Advanced DNS section<br><img src="/media/images/record.jpg" alt=""></p></li><li><p>Now, replace every CNAME and A record currenty in (but leave MX alone) with this: </p><ul><li>A record for @ pointing to 185.199.108.153 </li><li>A record for @ pointing to 185.199.109.153 </li><li>A record for @ pointing to 185.199.110.153 </li><li>A record for @ pointing to 185.199.111.153 </li><li>CNAME record for www pointing to your username.github.io or username.me domain</li></ul></li><li><p>Save your progress, and head on over to the Nameservers section in your control panel<br><img src="/media/images/editns.jpg" alt=""></p></li><li><p>Choose Custom DNS, and enter the 2 CloudFlare nameservers that were given to you earlier<br><img src="/media/images/editns2.jpg" alt=""></p></li><li><p>After this, you should be all done! Nameserver updates take around an hour, but eventually you’ll be able to access your .me domain with SSL enabled</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tutorials </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
            <tag> Github </tag>
            
            <tag> Hosting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rokrat</title>
      <link href="/2019/02/13/rokrat/"/>
      <url>/2019/02/13/rokrat/</url>
      
        <content type="html"><![CDATA[<h2 id="CVE-2018-4877-and-the-ROKRAT-Payload"><a href="#CVE-2018-4877-and-the-ROKRAT-Payload" class="headerlink" title="CVE-2018-4877 and the ROKRAT Payload"></a>CVE-2018-4877 and the ROKRAT Payload</h2><h5 id="February-5-2019-5-17-PM"><a href="#February-5-2019-5-17-PM" class="headerlink" title="February 5, 2019, 5:17 PM"></a>February 5, 2019, 5:17 PM</h5><p>We started our Summer Studio on Cyber Security by presenting our own research on a recently exploited vulnerability, it’s avenues of attack, it’s impact and it’s remediation.</p><h3 id="Adobe-Flash-Exploit-CVE-2018-4877"><a href="#Adobe-Flash-Exploit-CVE-2018-4877" class="headerlink" title="Adobe Flash Exploit CVE-2018-4877"></a>Adobe Flash Exploit CVE-2018-4877</h3><p>The CVE-2018-4877 exploit was first reported on the 6th of February 2018, and at the time, Flash was still a core component of most browsers.<br>The vector of attack for this exploit originated via an error in the code module dealing with Media Player handling of listener objects. </p><p>A pointer was used in the code to reference a specific memory address. After this memory is freed, and allocated to another pointer, the original pointer was not freed correctly (IE Probably just set to “” instead of NULL), and thus deferencing this pointer points to somewhere within the new allocation, and corrupts the memory contained within the address.</p><p>This corruption can be manipulated into pointing instead to valid memory address, which could contain the location of valid shellcode, thus allowing the execution or arbitrary code remotely.    </p><p>This exploit was leveraged via an Encapsulated PostScript (EPS) object that was found within a word processor document. The shellcode connects and downloads a payload called ROKRAT from an internet source,<br>disguised as .jpg files.</p><h3 id="The-ROKRAT-Payload"><a href="#The-ROKRAT-Payload" class="headerlink" title="The ROKRAT Payload"></a>The ROKRAT Payload</h3><p>ROKRAT was a HTTP based payload that gathered information about the victim such as keystrokes (via a Keylogger), Running processes, Machine information and<br>BIOS information.<br>It also listened to the attacker’s social media for commands, and was able to receive orders by checking the last message on a Twitter timeline. </p><p>The orders could be either execute a command, move a file, remove a file, kill a process or download and execute a file. </p><p>Yandex, a Russian internet platform was also used by the attackers in this payload as a source of downloadable/executable files as well as the destination to<br>upload any stolen documents.</p><p>Mediafire, a file hosting platform, was used in the same way as Yandex.</p><p>ROKRAT’s impact was significant due to being a completely HTTP based RAT. This is in contrast to a typical RAT which communicates via RDP (Remote Desktop Protocol), which can<br>easily be identified by a corporate firewall and blocked naturally. The 3 social media avenues that ROKRAT used would seldom be blocked by corporate policies, as companies<br>may have a justifiable business case in the use of these networks.</p><h3 id="Forensic-Analysis"><a href="#Forensic-Analysis" class="headerlink" title="Forensic Analysis"></a>Forensic Analysis</h3><p>ROKRAT actively attempted to hide from analysis by running a fake subroutine if it detected a running process that was flagged.</p><p>These flagged processes are below:</p><p><img src="/media/images/rokrat.png" alt="ROKRAT processes"></p><p>If ROKRAT detected any of these processes running, then it would generate fake HTTP traffic by sending HTTP GET requests to 2 sources:<br>.<em> <a href="https://www[.]amazon[.]com/Men-War-PC/dp/B001QZGVEC/EsoftTeam/watchcom.jpg" target="_blank" rel="noopener">https://www[.]amazon[.]com/Men-War-PC/dp/B001QZGVEC/EsoftTeam/watchcom.jpg</a><br>.</em> <a href="http://www[.]hulu[.]com/watch/559035/episode3.mp4" target="_blank" rel="noopener">http://www[.]hulu[.]com/watch/559035/episode3.mp4</a></p><p>These would display a image from an Amazon game called Men of War, whilst the Hulu URL would attempt to stream an episode of an anime called Golden Time.</p><p>It is thought that the purpose of this fake subroutine would be to trick any surface level analysis, or network logging done on the host machine.<br>Sources<br><a href="https://blog.talosintelligence.com/2018/02/group-123-goes-wild.html&quot;&gt;https://blog.talosintelligence.com/2018/02/group-123-goes-wild.html" target="_blank" rel="noopener">https://blog.talosintelligence.com/2018/02/group-123-goes-wild.html&quot;&gt;https://blog.talosintelligence.com/2018/02/group-123-goes-wild.html</a><br><a href="https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/november/rokrat-analysis/&quot;&gt;https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/november/rokrat-analysis/" target="_blank" rel="noopener">https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/november/rokrat-analysis/&quot;&gt;https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/november/rokrat-analysis/</a><br><a href="https://blog.talosintelligence.com/2017/04/introducing-rokrat.html&quot;&gt;https://blog.talosintelligence.com/2017/04/introducing-rokrat.html" target="_blank" rel="noopener">https://blog.talosintelligence.com/2017/04/introducing-rokrat.html&quot;&gt;https://blog.talosintelligence.com/2017/04/introducing-rokrat.html</a><br><a href="http://cwe.mitre.org/data/definitions/416.html&quot;&gt;http://cwe.mitre.org/data/definitions/416.html" target="_blank" rel="noopener">http://cwe.mitre.org/data/definitions/416.html&quot;&gt;http://cwe.mitre.org/data/definitions/416.html</a><br><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-4878#vulnCurrentDescriptionTitle&quot;&gt;https://nvd.nist.gov/vuln/detail/CVE-2018-4878#vulnCurrentDescriptionTitle" target="_blank" rel="noopener">https://nvd.nist.gov/vuln/detail/CVE-2018-4878#vulnCurrentDescriptionTitle&quot;&gt;https://nvd.nist.gov/vuln/detail/CVE-2018-4878#vulnCurrentDescriptionTitle</a></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reflections </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
